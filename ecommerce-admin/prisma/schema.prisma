// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id     String @id @default(cuid())
  name   String
  userId String

  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(cuid())

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  label    String
  imageUrl String

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())

  name String

  products Product[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id String @id @default(uuid())

  name  String
  value String

  products Product[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id String @id @default(uuid())

  name  String
  value String

  products Product[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())

  name       String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  images Image[]

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  sizeId String
  size   Size   @relation(fields: [sizeId], references: [id])

  colorId String
  color   Color  @relation(fields: [colorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(uuid())

  url String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
